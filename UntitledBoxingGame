task.wait(.4)
set_thread_identity(7)
if game.ReplicatedFirst:FindFirstChild("LocalScript") ~= nil then
	repeat
		task.wait(.05)
		game.ReplicatedFirst:FindFirstChild("LocalScript"):Destroy()
	until game.ReplicatedFirst:FindFirstChild("LocalScript") == nil
end
repeat
	task.wait(.05)
until game:IsLoaded()

local PredictionRate = 0
local CloseRangeActivation = 8
local EnabledAutoDodge = "1"
local EnabledNotifications = "1"
local CustomDodgeSoundId = "6427919074"
local EnableGui = "V"
local EnableAutoDodgeKey = "C"
local EnableAutoCounterKey = "X"
local AutoCounterHeavy = "2"
local SluggerM2Enabled = "1"
local CantDodgeOnBlock = "1"
local Blocking = false


local CustomHitBoxWow = {}

local MidChargeAction = "Block" -- Block or Dash dont remove the ""
local FullChargePrediction = .8
local TapHeavyNotChargedPrediction = .1
local HighPingCheck = .15

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local GameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name

local Camera = workspace.CurrentCamera

local YourGui = game:GetService("StarterGui")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local AutoDodgeDebounce = false
local Character = Player.Character
local AnimationsWow = {}
local KeyHolding = {}
local RobloxString = "rbxassetid://"


local MidChargeActionTable = {
	"Block",
	"Manual"
}
local Styles = {
	"Sendo",
	"LongGuard",

	"Kimura",

	"Basic",
	"Miyata",

	"Aoki",
	"Date",

	"Ippo",
	"Saeki",

	"Volk",
	"Hitman",

	"Takamura",
	"Hawk",

	"Ghost",

}

function lunafile(filename,wow)
	local bool,error = pcall(function() readfile(filename) end)
	if bool == false then

		writefile(filename,tostring(wow))
	elseif bool == true then

		writefile(filename,readfile(filename))

	end

end


local LastCameraCframe = CFrame.new()
local CameraSway = CFrame.new()

local OpenTap = 1

local OpenedGui = false
local OpenedSettings = false

lunafile("HighPingCheck",HighPingCheck)
lunafile("TapHeavyNotChargedPrediction",TapHeavyNotChargedPrediction)
lunafile("CustomDodgeSound",CustomDodgeSound)
lunafile("EnabledNotifications",EnabledNotifications)
lunafile("EnabledAutoDodge",EnabledAutoDodge)
lunafile("PredictionRate",PredictionRate)
lunafile("FChargePred",FullChargePrediction) 
lunafile("CloseRange",CloseRangeActivation) 
lunafile("CustomDodgeSoundId",CustomDodgeSoundId)
lunafile("MidChargeAction",MidChargeAction)
lunafile("EnableGui",EnableGui)
lunafile("EnableAutoDodgeKey",EnableAutoDodgeKey)
lunafile("AutoCounterHeavy",AutoCounterHeavy)
lunafile("EnableAutoCounterKey",EnableAutoCounterKey)
lunafile("SluggerM2Enabled",SluggerM2Enabled)
lunafile("CantDodgeOnBlock",CantDodgeOnBlock)


SluggerM2Enabled = readfile("SluggerM2Enabled")
EnableAutoCounterKey = readfile("EnableAutoCounterKey")
AutoCounterHeavy = readfile("AutoCounterHeavy")
EnableAutoDodgeKey = readfile("EnableAutoDodgeKey")
EnableGui = readfile("EnableGui")
HighPingCheck = tonumber(readfile("HighPingCheck"))
TapHeavyNotChargedPrediction = tonumber(readfile("TapHeavyNotChargedPrediction"))
MidChargeAction = readfile("MidChargeAction")
CloseRangeActivation = tonumber(readfile("CloseRange"))
FullChargePrediction = tonumber(readfile("FChargePred"))
PredictionRate = tonumber(readfile("PredictionRate"))
CustomDodgeSoundId = tonumber(readfile("CustomDodgeSoundId"))
EnabledAutoDodge = readfile("EnabledAutoDodge")
EnabledNotifications = readfile("EnabledNotifications")
CustomDodgeSound = readfile("CustomDodgeSound")
CantDodgeOnBlock = readfile("CantDodgeOnBlock")

function ReturnBoolFromText(Text)
	if Text == "1" then
		return true
	end
	if Text == "2" then
		return false
	end
end

if CantDodgeOnBlock == nil then
	CantDodgeOnBlock = "2"
end
if EnableAutoCounterKey == nil then
	EnableAutoCounterKey = "X"
end

if EnableAutoDodgeKey == nil then

	EnableAutoDodgeKey = "C"
end
if EnableGui == nil then

	EnableGui = "V"
end
if HighPingCheck == nil then

	HighPingCheck = .15
end
if TapHeavyNotChargedPrediction == nil then

	TapHeavyNotChargedPrediction = .15
end
if MidChargeAction == nil then

	MidChargeAction = "Block"
end
if CloseRangeActivation == nil then

	CloseRangeActivation = 13
end
if FullChargePrediction == nil then

	FullChargePrediction = .8
end
if PredictionRate == nil then

	PredictionRate = 0
end

if EnabledNotifications == nil then

	EnabledNotifications = "1"
end
if EnabledAutoDodge == nil then

	EnabledAutoDodge = "1"
end
if AutoCounterHeavy == nil then
	AutoCounterHeavy = "2"
end
if SluggerM2Enabled == nil then
	SluggerM2Enabled = "1"
end
if CantDodgeOnBlock == nil then
	CantDodgeOnBlock = "2"
end
task.spawn(function()
	task.wait(.94)
end)

local Window = Rayfield:CreateWindow({
    Name = "PalladiumHubðŸ˜ˆðŸ’ª",
    LoadingTitle = "Untitled boxing game",
    LoadingSubtitle = "by Matty",
    ConfigurationSaving = {
    Enabled = true,
    FolderName = nil, -- Create a custom folder for your hub/game
    FileName = "PalladiumHubðŸ˜ˆðŸ’ª"
    },
    Discord = {
    Enabled = false,
    Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
    RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
    Title = "Untitled",
    Subtitle = "Key System",
    Note = "No method of obtaining the key is provided",
    FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
    SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
    GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
    Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
})


game:GetService("RunService").RenderStepped:Connect(function(Timer)
	task.spawn(function()
		pcall(function()
			Player = game.Players.LocalPlayer
			Character = Player.Character
		end)
	end)

end)



function LeftClick(Target)
	task.spawn(function()
		mouse1click()
	end)
end

function PressKey(Key)
	task.spawn(function()
		keypress(Key)
	end)
end
function ReleaseKey(Key)
	task.spawn(function()
		keyrelease(Key)
	end)
end
function WhiteListAnimation(StyleName,Rawr)
	local Path = game.ReplicatedStorage.Modules.Styles[StyleName]
	local RequiredModule = require(Path)
	local NewbIe = require(game.ReplicatedStorage.Modules.Styles)
	for _,v in pairs(NewbIe) do
		if _ == StyleName then

			for _2,v2 in pairs(v) do

				task.spawn(function()

					if type(v2) == "table" and _2 == Rawr   and (_2 ~= "BlockAnimations" or _2 ~= "HitAnimations") then
						for _23,v23 in pairs(v2) do

							if type(_23) == "number"  then
								for _233,v233 in pairs(v23) do

									if type(v233) == "table" and (_2 ~= "HitInfo") then
										for s,ss in pairs(v233) do

											if s == "AnimId" or type(s) == "number" and (s ~= "HitInfo") then

												table.insert(AnimationsWow,(RobloxString..ss))
											end
										end
									end

									if _233 == "AnimId" and (_2 ~= "HitInfo") then

										table.insert(AnimationsWow,(RobloxString..v233))
									end

									if type(v233) == "table" and (_2 ~= "HitInfo") then
										for s,ss in pairs(v233) do
											if s == "AnimId" or type(s) == "number" and (s ~= "HitInfo") then

												table.insert(AnimationsWow,(RobloxString..ss))
											end
										end
									end

								end
							end
						end
					end

				end)

			end
		end

	end
	
end







WhiteListAnimation(workspace.States[Player.Name].PlayerData.Style.Value,"Combos")
WhiteListAnimation(workspace.States[Player.Name].PlayerData.Style.Value,"HeavyAttacks")







local TimeNow = tick()
local AutoDodgeTable = {
	AutoDodgeFunc = function(Table)
		Blocking = Blocking
		MidChargeAction = MidChargeAction
		PredictionRate = PredictionRate
		if AutoDodgeDebounce == true then
			return false
		end
		if CantDodgeOnBlock == "1" and Blocking == true then
			return true
		end




		local Length = Table[1]
		local Animation = Table[2]
		local Target = Table[3]
		local AutoCounter = Table[4]
		local CanCounter = false


		if AutoCounter == "1" and  workspace.States[Player.Name].CharacterData.Stunned.Value == false then
			CanCounter = true
		else
			CanCounter = false
		end
		if CantDodgeOnBlock == "2" and AutoCounter == "1" and  Blocking == true then
			CanCounter = false
		end
		local Speed = .01

		if not Animation.IsPlaying then

			return true
		end
		if AutoCounter == "2" then 
			if  SluggerM2Enabled == "2" then
				if (Animation.Animation.AnimationId == RobloxString.."13856095865")  then
					return
				end
				if (Animation.Animation.AnimationId == RobloxString.."13856037028") then

					return
				end
			end
		end

		AutoDodgeDebounce = true

		if AutoCounter == "2"  and SluggerM2Enabled == "1" then

			if (Animation.Animation.AnimationId == RobloxString.."13856095865")  then
				local lol = nil
				task.spawn(function()
					task.wait(TapHeavyNotChargedPrediction)
					PressKey(0x20)
					lol = game.Workspace.States[Player.Name].Occupied.Dashing:GetPropertyChangedSignal("Value"):Connect(function()
						if game.Workspace.States[Player.Name].Occupied.Dashing.Value == false then
							lol:Disconnect()
							if MidChargeAction == "Block" then
								if game.Workspace.States[Player.Name].Occupied.Blocking.Value == false then
									ReleaseKey(0x46)
									task.wait(.03)
									PressKey(0x46)
								end
								
								
							elseif MidChargeAction == "Dash" then
								task.wait(.01)
								PressKey(0x20)
							end

						end
					end)
				end) --hold(102)


				task.wait(FullChargePrediction)

				if Animation.IsPlaying  then
					PressKey(0x20)

				end
				

				task.wait(.02)
				AutoDodgeDebounce = false
				task.spawn(function()
					ReleaseKey(0x46)
				end)
				return true

			end

			if (Animation.Animation.AnimationId == RobloxString.."13856037028") then

				local lol = nil
				task.spawn(function()
					task.wait(TapHeavyNotChargedPrediction)
					PressKey(0x20)
					lol = game.Workspace.States[Player.Name].Occupied.Dashing:GetPropertyChangedSignal("Value"):Connect(function()
						if game.Workspace.States[Player.Name].Occupied.Dashing.Value == false then
							lol:Disconnect()
							if MidChargeAction == "Block" then
								if game.Workspace.States[Player.Name].Occupied.Blocking.Value == false then
									ReleaseKey(0x46)
									task.wait(.03)
									PressKey(0x46)
								end
							elseif MidChargeAction == "Dash" then
								task.wait(.03)
								PressKey(0x20)
							end
						end
					end)
				end) --hold(102)

				task.wait(FullChargePrediction)

				if Animation.IsPlaying then
					PressKey(0x20)

				end
				


				task.wait(.02)
				AutoDodgeDebounce = false
				task.spawn(function()
					ReleaseKey(0x46)
				end)
				return true
			end


		end







		task.spawn(function()
			local wow = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue() / 1000
			local DodgeType = "Neutral"
			local PredictDisFucker =((50 / 100) * Length) / (15.8 / 100) 
			local MathFloorit = math.floor(PredictDisFucker)
			local MathWork = MathFloorit / 10 
			local PrevMath = MathWork
			local N,I,G,A = .18,.2,.15,.16
			local customlisted = false
			if workspace.States[Target.Name].PlayerData.Style.Value == "Takamura" then


				if wow > HighPingCheck then
					N,I,G,A = 0,0,.25,.26
				else
					N,I,G,A = 0,0,.24,.25
				end

				customlisted = true
			end
			if workspace.States[Target.Name].PlayerData.Style.Value == "Ghost" then


				if wow > HighPingCheck then
					N,I,G,A = .31,.32,.05,.06
				else
					N,I,G,A = .3,.31,.05,.06
				end

				customlisted = true
			end
			if workspace.States[Target.Name].PlayerData.Style.Value == "Sendo" then


				if wow > HighPingCheck then
					N,I,G,A = .31,.32,.17,.18
				else
					N,I,G,A = .32,.33,.18,.19
				end

				customlisted = true
			end
			if workspace.States[Target.Name].PlayerData.Style.Value == "Basic" then


				if wow > HighPingCheck then
					N,I,G,A = .31,.32,.15,.16
				else
					N,I,G,A = .33,.33,.17,.18
				end

				customlisted = true
			end
			if workspace.States[Target.Name].PlayerData.Style.Value == "LongGuard" then
				if wow > HighPingCheck then
					N,I,G,A = .26,.27,.16,.17
				else
					N,I,G,A = .3,.31,.18,.19
				end

				customlisted = true
			end
			if workspace.States[Target.Name].PlayerData.Style.Value == "Volk" then
				if wow > HighPingCheck then
					N,I,G,A = .19,.2,.12,.13
				else
					N,I,G,A = .22,.23,.14,.15
				end

				customlisted = true
			end
			if workspace.States[Target.Name].PlayerData.Style.Value == "Hawk" then
				if wow > HighPingCheck then
					N,I,G,A = .26,.27,.17,.18
				else
					N,I,G,A = .3,.31,.19,.2
				end

				customlisted = true
			end
			if workspace.States[Target.Name].PlayerData.Style.Value == "Hitman" then

				if wow > HighPingCheck then
					N,I,G,A = .28,.29,.13,.14
				else
					N,I,G,A = .31,.32,.15,.16
				end

				customlisted = true
			end
			if workspace.States[Target.Name].PlayerData.Style.Value == "Ippo" then
				if wow > HighPingCheck then
					N,I,G,A = .26,.27,.16,.17
				else
					N,I,G,A = .31,.32,.17,.18
				end

				customlisted = true
			end
			if workspace.States[Target.Name].PlayerData.Style.Value == "Date" then

				if wow > HighPingCheck then
					N,I,G,A = .26,.27,.22,.23
				else
					N,I,G,A = .32,.33,.21,.22
				end

				customlisted = true
			end
			if workspace.States[Target.Name].PlayerData.Style.Value == "Saeki" then

				if wow > HighPingCheck then
					N,I,G,A = .28,.29,.16,.17
				else
					N,I,G,A = .3,.31,.16,.17
				end


				customlisted = true
			end
			if workspace.States[Target.Name].PlayerData.Style.Value == "Aoki" then
				if wow > HighPingCheck then
					N,I,G,A = .26,.27,.2,.21
				else
					N,I,G,A = .32,.33,.2,.21
				end



				customlisted = true
			end
			if workspace.States[Target.Name].PlayerData.Style.Value == "Miyata" then
				if wow > HighPingCheck then
					N,I,G,A = .25,.26,.18,.19
				else
					N,I,G,A = .3,.31,.18,.19
				end

				customlisted = true
			end
			if workspace.States[Target.Name].PlayerData.Style.Value == "Kimura" then
				if wow > HighPingCheck then
					N,I,G,A = .25,.26,.18,.19
				else
					N,I,G,A = .3,.31,.18,.19
				end

				customlisted = true
			end



			if customlisted == true then



				if workspace.States[Target.Name].PlayerData.Style.Value == "Date" then
					if (Animation.Animation.AnimationId == RobloxString.."13905370882")    then
						MathWork = Random.new():NextNumber(N, I)
						DodgeType = "Custom Slow"
					else
						MathWork = Random.new():NextNumber(G, A)
						DodgeType = "Custom Fast"
					end
				elseif workspace.States[Target.Name].PlayerData.Style.Value == "Kimura"  then
					if (Animation.Animation.AnimationId == RobloxString.."14537144533")    then
						MathWork = Random.new():NextNumber(N, I)
						DodgeType = "Custom Slow"
					else
						MathWork = Random.new():NextNumber(G, A)
						DodgeType = "Custom Fast"
					end

				elseif workspace.States[Target.Name].PlayerData.Style.Value == "Takamura"  then

					if (Animation.Animation.AnimationId == RobloxString.."13856095865") and (Animation.Animation.AnimationId == RobloxString.."13856037028")  then
						if workspace.States[Player.Name].PlayerData.Style.Value == "Ghost" and CanCounter then
							MathWork = 0
							DodgeType = "Custom Slow"
						else
							return
						end


					else
						MathWork = Random.new():NextNumber(G, A)
						DodgeType = "Custom Fast"
					end

				elseif workspace.States[Target.Name].PlayerData.Style.Value == "Ghost" then
					if (Animation.Animation.AnimationId == RobloxString.."14489703113")  then
						MathWork = Random.new():NextNumber(N, I)
						DodgeType = "Custom Slow"	
					else
						MathWork = Random.new():NextNumber(G, A)
						DodgeType = "Custom Fast"
					end

				elseif workspace.States[Target.Name].PlayerData.Style.Value == "Basic" then
					if (Animation.Animation.AnimationId == RobloxString.."13672753481") or (Animation.Animation.AnimationId == RobloxString.."13672865473")  then
						MathWork = Random.new():NextNumber(N, I)
						DodgeType = "Custom Slow"	
					else
						MathWork = Random.new():NextNumber(G, A)
						DodgeType = "Custom Fast"
					end
				elseif workspace.States[Target.Name].PlayerData.Style.Value == "Aoki" then
					if (Animation.Animation.AnimationId == RobloxString.."13813452521") then
						MathWork = Random.new():NextNumber(N, I)
						DodgeType = "Custom Slow"
					else
						MathWork = Random.new():NextNumber(G, A)
						DodgeType = "Custom Fast"
					end

				elseif workspace.States[Target.Name].PlayerData.Style.Value == "Hawk" then
					if (Animation.Animation.AnimationId == RobloxString.."14136346745") or (Animation.Animation.AnimationId == RobloxString.."14136372505") then
						MathWork =  Random.new():NextNumber(N, I)
						DodgeType = "Custom Slow"
					else
						MathWork =Random.new():NextNumber(G, A)
						DodgeType = "Custom Fast"
					end

				elseif workspace.States[Target.Name].PlayerData.Style.Value == "Hitman" then


					if (Animation.Animation.AnimationId == RobloxString.."13633644625") or (Animation.Animation.AnimationId == RobloxString.."13633644575") then
						MathWork =  Random.new():NextNumber(N, I)
						DodgeType = "Custom Slow"

					else
						MathWork =  Random.new():NextNumber(G, A)
						DodgeType = "Custom Fast"

					end

				elseif workspace.States[Target.Name].PlayerData.Style.Value == "LongGuard" then

					if (Animation.Animation.AnimationId == RobloxString.."13662226806") or (Animation.Animation.AnimationId == RobloxString.."13662089630") then
						MathWork =  Random.new():NextNumber(N, I)
						DodgeType = "Custom Slow"
					else
						MathWork =  Random.new():NextNumber(G, A)
						DodgeType = "Custom Fast"
					end

				elseif workspace.States[Target.Name].PlayerData.Style.Value == "Saeki" then
					if (Animation.Animation.AnimationId == RobloxString.."13992743441") or (Animation.Animation.AnimationId == RobloxString.."13992689531") then
						MathWork =  Random.new():NextNumber(N, I)
						DodgeType = "Custom Slow"
					else



						MathWork =  Random.new():NextNumber(G, A)
						DodgeType = "Custom Fast"
					end


				elseif workspace.States[Target.Name].PlayerData.Style.Value == "Volk" then


					if (Animation.Animation.AnimationId == RobloxString.."14089766799")    then

						MathWork =  Random.new():NextNumber(N, I)
						DodgeType = "Custom Slow"

					else 
						MathWork =  Random.new():NextNumber(G, A)
						DodgeType = "Custom Fast"

					end
				elseif workspace.States[Target.Name].PlayerData.Style.Value == "Miyata" then



					if (Animation.Animation.AnimationId == RobloxString.."13665187957") or (Animation.Animation.AnimationId == RobloxString.."13667496183")   then

						MathWork =  Random.new():NextNumber(N, I)
						DodgeType = "Custom Slow"
					else
						MathWork =  Random.new():NextNumber(G, A)
						DodgeType = "Custom Fast"

					end

				elseif workspace.States[Target.Name].PlayerData.Style.Value == "Ippo" then

					if (Animation.Animation.AnimationId == RobloxString.."13633649204") or (Animation.Animation.AnimationId == RobloxString.."13633649147") then
						MathWork =  Random.new():NextNumber(N, I)
						DodgeType = "Custom Slow"
					else
						MathWork =  Random.new():NextNumber(G, A)
						DodgeType = "Custom Fast"
					end

				elseif workspace.States[Target.Name].PlayerData.Style.Value == "Sendo" then

					if (Animation.Animation.AnimationId == RobloxString.."13645834227") then
						MathWork = Random.new():NextNumber(N, I)
						DodgeType = "Custom Slow"
					else

						MathWork =  Random.new():NextNumber(G, A)
						DodgeType = "Custom Fast"

					end



				end



			else
				if  MathWork > 0.2 then
					MathWork = Random.new():NextNumber(0.2, 0.3)
					DodgeType = "Slow"
				elseif  MathWork < 0.3 then
					MathWork = Random.new():NextNumber(0.15, 0.16)

					DodgeType = "Fast"

				end
			end

			local formattedResultPing = string.format("%.2f", wow)
			local LastResult = tonumber(formattedResultPing) 
			local formattedResult = string.format("%.2f", MathWork)
			if PredictionRate == nil then
				PredictionRate = 0
			end
			if wow > HighPingCheck and (DodgeType == "Fast" or DodgeType == "Custom Fast") then
				if PredictionRate > 1 then
					MathWork = (tonumber(formattedResult) - LastResult) + (PredictionRate / 100)
				elseif PredictionRate < 0 then
					local Convert = tostring(PredictionRate)
					local Split = Convert:split("-")
					local ConvertBack = tonumber(Split[2])
					local Randomized = (ConvertBack / 100)
					MathWork = (tonumber(formattedResult) - LastResult) - (Randomized)
				elseif PredictionRate == 0 or PredictionRate == 1 then
					MathWork = (tonumber(formattedResult) - LastResult)
				end

			else
				if PredictionRate > 1 then
					MathWork = tonumber(formattedResult) + (PredictionRate / 100)
				elseif PredictionRate < 0 then
					local Convert = tostring(PredictionRate)
					local Split = Convert:split("-")
					local ConvertBack = tonumber(Split[2])
					local Randomized = (ConvertBack / 100)
					MathWork = tonumber(formattedResult) - (Randomized)
				elseif PredictionRate == 0 or PredictionRate == 1 then
					MathWork = tonumber(formattedResult)
				end
			end

			if CanCounter and workspace.States[Target.Name].PlayerData.Style.Value == "Ghost" then

				if (DodgeType == "Custom Slow" or DodgeType == "Slow") then
					LeftClick(Target.Character)
					AutoDodgeDebounce = false
					return
				end

			end
			if CanCounter and workspace.States[Target.Name].PlayerData.Style.Value ~= "Ghost" then

				if workspace.States[Player.Name].PlayerData.Style.Value == "Ghost" then


					LeftClick(Target.Character)
					AutoDodgeDebounce = false
					return
				end
				if (DodgeType == "Custom Slow" or DodgeType == "Slow") then
					LeftClick(Target.Character)
					AutoDodgeDebounce = false
					return
				end
			end -- can counter

			warn("Animation: "..tostring(Animation.Animation.AnimationId))
			task.wait(MathWork)
			PressKey(0x20)


			task.spawn(function()
				if workspace.States[Player.Name].CharacterData.Stunned.Value == false then
                    game:GetService("StarterGui"):SetCore("SendNotification", {
                        Title = "PalladiumHubðŸ˜ˆðŸ’ª",
                        Text = DodgeType.." Timed: "..PrevMath.."/"..MathWork.." / "..AnimationSpeed,
                    })
				end
			end)


			AutoDodgeDebounce = false

		end)





		return true
	end,



}
local Timed = tick()
local UsedToBeWow = true

function OnGoing()
local Target = game.Workspace.States[Player.Name].Occupied.LockedOn.Value

	if Target and game.Players:FindFirstChild(Target.Name) then

		local PlayerTarget = game.Players:FindFirstChild(Target.Name)
		local CharacterT = PlayerTarget.Character
		local HumanoidT = CharacterT.Humanoid
		WhiteListAnimation(workspace.States[PlayerTarget.Name].PlayerData.Style.Value,"Combos")
		WhiteListAnimation(workspace.States[PlayerTarget.Name].PlayerData.Style.Value,"HeavyAttacks")

		table.insert(CustomHitBoxWow,PlayerTarget)

		HumanoidT.AnimationPlayed:Connect(function(track)
			local Distance = Player:DistanceFromCharacter(CharacterT.HumanoidRootPart.Position)

			if Distance < CloseRangeActivation then
				if game.Workspace.States[Player.Name].Occupied.LockedOn.Value and game.Workspace.States[Player.Name].Occupied.LockedOn.Value.Name ~= HumanoidT.Parent.Name then
					return
				end

				if workspace.States[PlayerTarget.Name].Occupied.Equipped.Value == false then
					return
				end

				if not table.find(AnimationsWow,track.Animation.AnimationId) then
					return
				end
				if EnabledAutoDodge == "2" then
					return
				end
				if workspace.States[PlayerTarget.Name].CharacterData.Stunned.Value == true then
					return
				end
				if CantDodgeOnBlock == "1" and Blocking == true then
					return
				end
				TimeNow = tick()
				AutoDodgeTable.AutoDodgeFunc({track.Length,track,PlayerTarget,AutoCounterHeavy})
			end
		end)
	end

end


game.Workspace.States[Player.Name].Occupied.Blocking:GetPropertyChangedSignal("Value"):Connect(function()
	Blocking = game.Workspace.States[Player.Name].Occupied.Blocking.Value
	if CantDodgeOnBlock == "1" and Blocking == true then
		AutoDodgeDebounce = true
	elseif CantDodgeOnBlock == "1" and Blocking == false then
		AutoDodgeDebounce = false

	end

end)

task.spawn(function()
OnGoing()
end)

game.Workspace.States[Player.Name].Occupied.LockedOn:GetPropertyChangedSignal("Value"):Connect(function()
OnGoing()
end)

local AutoDodgeTab = Window:CreateTab("Auto Dodge", 4483362458) -- Title, Image
local AutoDodgeSection = AutoDodgeTab:CreateSection("Stuffz")

local SluggerzTab = Window:CreateTab("Sluggerz", 4483362458) -- Title, Image
local SluggerzSection = SluggerzTab:CreateSection("Sluggerz")

local KeyBindsTab = Window:CreateTab("KeyBindz & Stuffz", 4483362458) -- Title, Image
local KeyBindsSection = KeyBindsTab:CreateSection("Key Set-ups")

local Toggle = AutoDodgeTab:CreateToggle({
    Name = "Disable AutoDodge On Block",
    CurrentValue = ReturnBoolFromText(CantDodgeOnBlock),
    Color = Color3.fromRGB(0, 125, 255),
    Size = 0.25,
    Callback = function(Value)
    if Value then
        CantDodgeOnBlock = "1"
    else
        CantDodgeOnBlock = "2"
    end
    writefile("CantDodgeOnBlock", tostring(CantDodgeOnBlock))
    end
})

local Input = AutoDodgeTab:CreateInput({
    Name = "Prediction",
    PlaceholderText = "0",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        PredictionRate = tonumber(Text)
        writefile("PredictionRate", tostring(PredictionRate)) 
    end,
})

local Input = AutoDodgeTab:CreateInput({
    Name = "High Ping Check", -- Set the name to "High Ping Check"
    PlaceholderText = "0.15", -- You can adjust the placeholder text as needed
    RemoveTextAfterFocusLost = false, -- Set this according to your requirements
    Callback = function(Text)
    -- This function takes place when the input is changed
    -- The variable (Text) is a string for the value in the text box
        HighPingCheck = tonumber(Text)
        writefile("HighPingCheck", tostring(HighPingCheck))
    end,
})

local Input = AutoDodgeTab:CreateInput({
    Name = "In Range Activation",
    PlaceholderText = "8",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        CloseRangeActivation = tonumber(Text)
        writefile("CloseRange", tostring(CloseRangeActivation))
    end,
})

local Input = SluggerzTab:CreateInput({
    Name = "Full Charge Prediction", -- Set the name to your desired text
    PlaceholderText = "0.8",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        FullChargePrediction = tonumber(Text)
        writefile("FChargePred", tostring(FullChargePrediction))
    end,
})

local Input = SluggerzTab:CreateInput({
    Name = "No Charge Prediction",
    PlaceholderText = "0.1",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        TapHeavyNotChargedPrediction = tonumber(Text)
        writefile("TapHeavyNotChargedPrediction", tostring(TapHeavyNotChargedPrediction))
    end,
})

local Toggle = SluggerzTab:CreateToggle({
    Name = "Enable Slugger M2 Predictions",
    CurrentValue = ReturnBoolFromText(SluggerM2Enabled) == "1", -- Convert to boolean
    Flag = "SluggerM2Enabled", -- Use a consistent flag
    Callback = function(Value)
        if Value then
            SluggerM2Enabled = "1"
            writefile("SluggerM2Enabled",SluggerM2Enabled)
        else
            SluggerM2Enabled = "2"
            writefile("SluggerM2Enabled",SluggerM2Enabled)
        end
    end
})

local Keybind = KeyBindsTab:CreateKeybind({
    Name = "Auto Counter",
    CurrentKeybind = "X",
    HoldToInteract = false,
    Flag = "AutoCounterKeyBind", -- Make sure it's a unique flag
    Callback = function(Keybind)
        if AutoCounterHeavy == "1" then
            AutoCounterHeavy = "2"
            writefile("AutoCounterHeavy", AutoCounterHeavy)
        elseif AutoCounterHeavy == "2" then
            AutoCounterHeavy = "1"
            writefile("AutoCounterHeavy",AutoCounterHeavy)
        end
    end,
})

local Keybind = KeyBindsTab:CreateKeybind({
    Name = "Auto Dodge",
    CurrentKeybind = "C",
    HoldToInteract = false,
    Flag = "EnableAutoDodgeKey", -- Make sure each keybind has a unique flag
    Callback = function(Keybind)
        if EnabledAutoDodge == "1" then
            EnabledAutoDodge = "2"
            writefile("EnabledAutoDodge", EnabledAutoDodge)
	    Rayfield:Notify({
    		Title = "",
    		Content = "Auto Dodge: " .. tostring(ReturnBoolFromText(EnabledAutoDodge)),
    		Duration = 1.2,
    		Image = 4483362458,
    		Actions = { -- Notification Buttons
        		Ignore = {
            		Name = "ye",
            		Callback = function()
                		print("The user tapped Okay!")
            		end
        },
    },
})

        elseif EnabledAutoDodge == "2" then
            EnabledAutoDodge = "1"
            writefile("EnabledAutoDodge", EnabledAutoDodge)
	    Rayfield:Notify({
    		Title = "",
    		Content = "Auto Dodge: " .. tostring(ReturnBoolFromText(EnabledAutoDodge)),
    		Duration = 1.2,
    		Image = 4483362458,
    		Actions = { -- Notification Buttons
        		Ignore = {
            		Name = "ye",
            		Callback = function()
                		print("The user tapped Okay!")
            		end
        },
    },
})

        end
    end,
})

local Slider = KeyBindsTab:CreateSlider({
    Name = "Time Cycle",
    Range = {1, 10},
    Increment = 1,
    Suffix = "TimeShit",
    CurrentValue = 10,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        -- The function that takes place when the slider changes
        -- The variable (Value) is a number which correlates to the value the slider is currently at
        game.Lighting.ClockTime = Value
    end,
})

Rayfield:LoadConfiguration()

